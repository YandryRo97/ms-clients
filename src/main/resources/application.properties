spring.application.name=ms-clients
server.port=8080

# --- Postgres (usa el nombre del servicio del compose)
spring.datasource.url=jdbc:postgresql://postgres-clients:5432/bank-clients
spring.datasource.username=postgres
spring.datasource.password=pass123
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# --- RabbitMQ (nombre del servicio en compose)
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# --- Redis (asegúrate de poner redis en la misma red del compose)
spring.data.redis.host=redis
spring.data.redis.port=6379

# Logs
logging.level.org.hibernate.SQL=info
logging.level.org.springframework=INFO

# --- WebClient (APUNTA A ms-transactions dentro de la red Docker)
# si tu código usa @Value("${webclient.base-url}")
webclient.base-url=http://ms-transactions:8081
# (si usas @Value("${transactions.base-url}"), entonces usa:)
# transactions.base-url=http://ms-transactions:8081
